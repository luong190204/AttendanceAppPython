import sys
import time
import traceback

import cv2
import numpy as np
import os
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
                             QLineEdit, QTextEdit, QGroupBox, QGridLayout, QComboBox,
                             QDialogButtonBox, QScrollArea, QMessageBox, QMainWindow,
                             QTableWidget, QTableWidgetItem, QApplication, QWidget, QAbstractItemView,
                            QDateEdit)
from PyQt5.QtCore import Qt, pyqtSignal, QDate
from PyQt5.QtGui import QImage, QPixmap, QFont, QColor


from database.student_repository import StudentRepository
from face_recognition_module.face_embedder import FaceEmbedder

class FaceCaptureDialog(QDialog):
    facesCaptured = pyqtSignal(list)

    def __init__(self, student_id, student_name="Unknown", parent=None):
        super().__init__(parent)
        self.student_name = student_name
        self.student_id = student_id
        self.face_embedder = FaceEmbedder()
        self.face_embeddings = []
        self.cap = None
        self.timer = None
        self.setupUI()
        self.sample_count = 0
        self.max_samples = 3
        self.save_dir = f"assets/student_faces"
        os.makedirs(self.save_dir, exist_ok=True)
        self.student_repo = StudentRepository()

    def setupUI(self):
        self.setWindowTitle(f"Ch·ª•p khu√¥n m·∫∑t - {self.student_name}")
        self.setFixedSize(800, 600)

        layout = QVBoxLayout()

        self.video_label = QLabel()
        self.video_label.setFixedSize(640, 480)
        self.video_label.setStyleSheet("border: 2px solid #D1D5DB; border-radius: 5px;")
        layout.addWidget(self.video_label)

        self.status_label = QLabel("Nh·∫•n 'B·∫Øt ƒë·∫ßu' ƒë·ªÉ ch·ª•p khu√¥n m·∫∑t")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                color: #6B7280;
                padding: 10px;
                text-align: center;
            }
        """)
        layout.addWidget(self.status_label)

        button_layout = QHBoxLayout()
        self.start_btn = QPushButton("‚ñ∂ B·∫Øt ƒë·∫ßu")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #10B981;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #059669;
            }
        """)
        self.start_btn.clicked.connect(self.startCapture)
        button_layout.addWidget(self.start_btn)

        self.stop_btn = QPushButton("‚ñ† D·ª´ng")
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #EF4444;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #DC2626;
            }
        """)
        self.stop_btn.clicked.connect(self.stopCapture)
        self.stop_btn.setEnabled(False)
        button_layout.addWidget(self.stop_btn)

        button_layout.addStretch()
        layout.addLayout(button_layout)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.button_box.button(QDialogButtonBox.Ok).setText("üíæ L∆∞u")
        self.button_box.button(QDialogButtonBox.Cancel).setText("‚ùå H·ªßy")
        self.button_box.accepted.connect(self.saveFaces)
        self.button_box.rejected.connect(self.reject)
        self.button_box.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton[text="üíæ L∆∞u"] {
                background-color: #6B46C1;
                color: white;
                border: none;
            }
            QPushButton[text="üíæ L∆∞u"]:hover {
                background-color: #553C9A;
            }
            QPushButton[text="‚ùå H·ªßy"] {
                background-color: #6B7280;
                color: white;
                border: none;
            }
            QPushButton[text="‚ùå H·ªßy"]:hover {
                background-color: #4B5563;
            }
        """)
        layout.addWidget(self.button_box)

        self.setLayout(layout)

    def startCapture(self):
        try:
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ m·ªü camera!")
                return

            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.timer = self.startTimer(30)
            self.status_label.setText("ƒêang ch·ª•p khu√¥n m·∫∑t... Vui l√≤ng nh√¨n v√†o camera.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ch·ª•p: {str(e)}")

    def timerEvent(self, event):
        try:
            ret, frame = self.cap.read()
            if not ret:
                return

            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Detect v√† encode embedding
            embeddings = self.face_embedder.detect_and_encode_faces(frame_rgb)
            if embeddings:
                embedding = embeddings[0]  # l·∫•y khu√¥n m·∫∑t ƒë·∫ßu ti√™n
                # L∆∞u ·∫£nh v√†o th∆∞ m·ª•c v·ªõi t√™n r√µ r√†ng
                timestamp = int(time.time())
                img_filename = f"{self.student_id}_{self.sample_count + 1}_{timestamp}.jpg"
                img_path = os.path.join(self.save_dir, img_filename)
                cv2.imwrite(img_path, frame)

                # L∆∞u embedding v√†o CSDL
                embedding_blob = embedding.astype(np.float32).tobytes()
                with self.face_embedder.processing_lock:
                    if self.student_repo.add_face_embedding(self.student_id, img_path, embedding_blob):
                        self.face_embeddings.append(embedding)
                        self.sample_count += 1
                        self.status_label.setText(f"ƒê√£ ch·ª•p {self.sample_count}/{self.max_samples} m·∫´u")
                    else:
                        print(f"L·ªói khi l∆∞u embedding m·∫´u {self.sample_count + 1}")

                if self.sample_count >= self.max_samples:
                    self.stopCapture()

            # Hi·ªÉn th·ªã video
            h, w, ch = frame_rgb.shape
            bytes_per_line = ch * w
            q_image = QImage(frame_rgb.data, w, h, bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_image).scaled(self.video_label.size(), Qt.KeepAspectRatio)
            self.video_label.setPixmap(pixmap)

        except Exception as e:
            print(f"Error in timerEvent: {e}")

    def stopCapture(self):
        if self.cap:
            self.cap.release()
            self.cap = None
        if self.timer:
            self.killTimer(self.timer)
            self.timer = None
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.status_label.setText(f"ƒê√£ ch·ª•p {len(self.face_embeddings)}/3 m·∫´u khu√¥n m·∫∑t")

    def saveFaces(self):
        if len(self.face_embeddings) < 3:
            QMessageBox.warning(self, "C·∫£nh b√°o", "C·∫ßn √≠t nh·∫•t 3 m·∫´u khu√¥n m·∫∑t!")
            return
        self.facesCaptured.emit(self.face_embeddings)
        self.accept()

    def closeEvent(self, event):
        self.stopCapture()
        event.accept()


class StudentFormDialog(QDialog):
    studentSaved = pyqtSignal(dict)

    def __init__(self, student_data=None, parent=None):
        super().__init__(parent)
        self.student_id_edit = None
        self.student_data = student_data
        self.face_embeddings = []
        self.student_repository = StudentRepository()
        self.setupUI()
        if student_data:
            self.loadStudentData()

        self.capture_face_btn.clicked.connect(self.captureFace)
        self.clear_faces_btn.clicked.connect(self.clearFaceData)
        self.button_box = self.findChild(QDialogButtonBox)
        self.button_box.accepted.connect(self.saveStudent)
        self.button_box.rejected.connect(self.reject)

    def setupUI(self):
        self.setWindowTitle("Th√™m sinh vi√™n" if not self.student_data else "S·ª≠a th√¥ng tin sinh vi√™n")
        self.setFixedSize(750, 850)

        main_layout = QVBoxLayout()

        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        layout = QVBoxLayout()

        title = QLabel("üìö Th√¥ng tin sinh vi√™n")
        title.setStyleSheet("""
            QLabel {
                font-size: 22px;
                font-weight: bold;
                color: #6B46C1;
                padding: 15px;
                text-align: center;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 10px;
            }
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        form_group = QGroupBox("Th√¥ng tin c∆° b·∫£n")
        form_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #E5E7EB;
                border-radius: 10px;
                margin-top: 10px;
                padding: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #6B46C1;
            }
        """)
        form_layout = QGridLayout()

        # M√£ sinh vi√™n
        form_layout.addWidget(QLabel("M√£ sinh vi√™n: *"), 0, 0)
        self.student_id_edit = QLineEdit()
        self.student_id_edit.setPlaceholderText("Nh·∫≠p m√£ sinh vi√™n (VD: SV001)")
        form_layout.addWidget(self.student_id_edit, 0, 1)

        # H·ªç t√™n
        form_layout.addWidget(QLabel("H·ªç t√™n: *"), 1, 0)
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß")
        form_layout.addWidget(self.name_edit, 1, 1)

        # Ng√†y sinh (Date Picker)
        form_layout.addWidget(QLabel("Ng√†y sinh:"), 2, 0)
        self.birth_edit = QDateEdit()
        self.birth_edit.setCalendarPopup(True)
        self.birth_edit.setDisplayFormat("dd/MM/yyyy")
        form_layout.addWidget(self.birth_edit, 2, 1)

        # Gi·ªõi t√≠nh (ComboBox)
        form_layout.addWidget(QLabel("Gi·ªõi t√≠nh:"), 3, 0)
        self.gender_combo = QComboBox()
        self.gender_combo.addItems(["Nam", "N·ªØ", "Kh√°c"])
        form_layout.addWidget(self.gender_combo, 3, 1)

        # ƒê·ªãa ch·ªâ
        form_layout.addWidget(QLabel("ƒê·ªãa ch·ªâ:"), 4, 0)
        self.address_edit = QLineEdit()
        self.address_edit.setPlaceholderText("Nh·∫≠p ƒë·ªãa ch·ªâ li√™n l·∫°c")
        form_layout.addWidget(self.address_edit, 4, 1)

        # Email
        form_layout.addWidget(QLabel("Email:"), 5, 0)
        self.email_edit = QLineEdit()
        self.email_edit.setPlaceholderText("Nh·∫≠p ƒë·ªãa ch·ªâ email")
        form_layout.addWidget(self.email_edit, 5, 1)

        # S·ªë ƒëi·ªán tho·∫°i
        form_layout.addWidget(QLabel("S·ªë ƒëi·ªán tho·∫°i:"), 6, 0)
        self.phone_edit = QLineEdit()
        self.phone_edit.setPlaceholderText("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")
        form_layout.addWidget(self.phone_edit, 6, 1)

        form_group.setLayout(form_layout)
        layout.addWidget(form_group)

        # === Nh√≥m d·ªØ li·ªáu khu√¥n m·∫∑t ===
        self.face_group = QGroupBox("üé≠ D·ªØ li·ªáu khu√¥n m·∫∑t")
        self.face_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #E5E7EB;
                border-radius: 10px;
                margin-top: 10px;
                padding: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #10B981;
            }
        """)
        face_layout = QVBoxLayout()

        self.face_status_label = QLabel("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t")
        self.face_status_label.setStyleSheet("""
            QLabel {
                color: #F59E0B; 
                font-weight: bold; 
                padding: 10px;
                background-color: #FEF3C7;
                border-radius: 5px;
                border: 1px solid #F59E0B;
            }
        """)
        face_layout.addWidget(self.face_status_label)

        face_button_layout = QHBoxLayout()
        self.capture_face_btn = QPushButton("üì∏ Ch·ª•p khu√¥n m·∫∑t")
        self.capture_face_btn.setStyleSheet("""
            QPushButton {
                background-color: #10B981;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #059669;
            }
        """)

        self.clear_faces_btn = QPushButton("üóëÔ∏è X√≥a d·ªØ li·ªáu")
        self.clear_faces_btn.setStyleSheet("""
            QPushButton {
                background-color: #EF4444;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #DC2626;
            }
        """)

        face_button_layout.addWidget(self.capture_face_btn)
        face_button_layout.addWidget(self.clear_faces_btn)
        face_button_layout.addStretch()
        face_layout.addLayout(face_button_layout)

        self.face_group.setLayout(face_layout)

        # üëâ Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô s·ª≠a sinh vi√™n
        self.face_group.setVisible(bool(self.student_data))
        layout.addWidget(self.face_group)

        note_label = QLabel("* Tr∆∞·ªùng b·∫Øt bu·ªôc")
        note_label.setStyleSheet("color: #EF4444; font-style: italic; padding: 5px;")
        layout.addWidget(note_label)

        scroll_widget.setLayout(layout)
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        main_layout.addWidget(scroll_area)

        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.button_box.button(QDialogButtonBox.Ok).setText("üíæ L∆∞u")
        self.button_box.button(QDialogButtonBox.Cancel).setText("‚ùå H·ªßy")
        self.button_box.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton[text="üíæ L∆∞u"] {
                background-color: #6B46C1;
                color: white;
                border: none;
            }
            QPushButton[text="üíæ L∆∞u"]:hover {
                background-color: #553C9A;
            }
            QPushButton[text="‚ùå H·ªßy"] {
                background-color: #6B7280;
                color: white;
                border: none;
            }
            QPushButton[text="‚ùå H·ªßy"]:hover {
                background-color: #4B5563;
            }
        """)
        main_layout.addWidget(self.button_box)

        self.setLayout(main_layout)

    def loadStudentData(self):
        try:
            self.student_id_edit.setText(self.student_data.get('MaSV', ''))
            self.student_id_edit.setEnabled(False)
            self.name_edit.setText(self.student_data.get('TenSV', ''))

            # Ng√†y sinh (QDateEdit)
            ngaysinh_str = self.student_data.get('NgaySinh', '')
            if ngaysinh_str:
                try:
                    date = QDate.fromString(ngaysinh_str, "dd/MM/yyyy")
                    if not date.isValid():
                        date = QDate.fromString(ngaysinh_str, "yyyy-MM-dd")
                    if date.isValid():
                        self.birth_edit.setDate(date)
                except:
                    pass

            # Gi·ªõi t√≠nh (QComboBox)
            gioitinh = self.student_data.get('GioiTinh', '')
            index = self.gender_combo.findText(gioitinh)
            if index >= 0:
                self.gender_combo.setCurrentIndex(index)

            # C√°c tr∆∞·ªùng c√≤n l·∫°i
            self.address_edit.setText(self.student_data.get('DiaChi', ''))
            self.email_edit.setText(self.student_data.get('Email', ''))
            self.phone_edit.setText(self.student_data.get('SDT', ''))

            self.face_embeddings = self.student_data.get('embeddings', [])
            self.updateFaceStatus()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu sinh vi√™n: {str(e)}")

    def updateFaceStatus(self):
        if len(self.face_embeddings) >= 3:
            self.face_status_label.setText("‚úÖ ƒê√£ c√≥ ƒë·ªß d·ªØ li·ªáu khu√¥n m·∫∑t")
            self.face_status_label.setStyleSheet("""
                QLabel {
                    color: #059669; 
                    font-weight: bold; 
                    padding: 10px;
                    background-color: #D1FAE5;
                    border-radius: 5px;
                    border: 1px solid #059669;
                }
            """)
        else:
            self.face_status_label.setText(f"‚ö†Ô∏è ƒê√£ c√≥ {len(self.face_embeddings)}/3 m·∫´u khu√¥n m·∫∑t")
            self.face_status_label.setStyleSheet("""
                QLabel {
                    color: #F59E0B; 
                    font-weight: bold; 
                    padding: 10px;
                    background-color: #FEF3C7;
                    border-radius: 5px;
                    border: 1px solid #F59E0B;
                }
            """)

    def captureFace(self):
        student_id = self.student_id_edit.text().strip()
        try:
            dialog = FaceCaptureDialog(student_id ,student_name=self.name_edit.text() or "Sinh vi√™n", parent=self)
            dialog.facesCaptured.connect(self.storeFaceEmbeddings)
            dialog.exec_()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ m·ªü giao di·ªán ch·ª•p khu√¥n m·∫∑t: {str(e)}")

    def storeFaceEmbeddings(self, embeddings):
        self.face_embeddings = embeddings
        self.updateFaceStatus()

    def clearFaceData(self):
        if QMessageBox.question(self, "X√°c nh·∫≠n",
                                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªØ li·ªáu khu√¥n m·∫∑t?",
                                QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:
            self.face_embeddings = []
            self.updateFaceStatus()

    def validateInput(self):
        student_id = self.student_id_edit.text().strip()
        name = self.name_edit.text().strip()

        if not student_id:
            QMessageBox.warning(self, "L·ªói nh·∫≠p li·ªáu", "M√£ sinh vi√™n l√† b·∫Øt bu·ªôc!")
            return False
        if not name:
            QMessageBox.warning(self, "L·ªói nh·∫≠p li·ªáu", "H·ªç t√™n l√† b·∫Øt bu·ªôc!")
            return False
        """ Hi·ªán t·∫°i kh√¥ng l·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t khi th√™m sinh vi√™n
        if len(self.face_embeddings) < 3 and not self.student_data:
            QMessageBox.warning(self, "L·ªói nh·∫≠p li·ªáu", "C·∫ßn √≠t nh·∫•t 3 m·∫´u d·ªØ li·ªáu khu√¥n m·∫∑t!")
            return False
        """
        return True

    def saveStudent(self):
        try:
            if not self.validateInput():
                return

            student_data = {
                'MaSV': self.student_id_edit.text().strip(),
                'TenSV': self.name_edit.text().strip(),
                'NgaySinh': self.birth_edit.date().toString("yyyy-MM-dd"),
                'GioiTinh': self.gender_combo.currentText(),
                'DiaChi': self.address_edit.text().strip(),
                'Email': self.email_edit.text().strip(),
                'SDT': self.phone_edit.text().strip(),
            }

            if self.student_data:  # c·∫≠p nh·∫≠t
                success = self.student_repository.update_student(
                    student_data['MaSV'],
                    student_data['TenSV'],
                    student_data['NgaySinh'],
                    student_data['GioiTinh'],
                    student_data['DiaChi'],
                    student_data['Email'],
                    student_data['SDT']
                )
                action = "c·∫≠p nh·∫≠t"
            else:  # th√™m m·ªõi
                success = self.student_repository.add_student(
                    student_data['MaSV'],
                    student_data['TenSV'],
                    student_data['NgaySinh'],
                    student_data['GioiTinh'],
                    student_data['DiaChi'],
                    student_data['Email'],
                    student_data['SDT']
                )
                action = "th√™m"

            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ {action} sinh vi√™n th√†nh c√¥ng!")
                self.studentSaved.emit(student_data)
                self.accept()
            else:
                traceback.print_exc()
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ {action} sinh vi√™n. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        except Exception as e:

            QMessageBox.critical(self, "L·ªói", f"L·ªói khi l∆∞u d·ªØ li·ªáu sinh vi√™n: {str(e)}")

    def closeEvent(self, event):
        event.accept()


class StudentManagementUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.student_repository = StudentRepository()
        self.setupUI()
        self.loadStudents()
        self.setFixedSize(1350, 800)

    def setupUI(self):
        self.setWindowTitle("Qu·∫£n l√Ω Sinh vi√™n")
        self.setGeometry(150, 150, 1000, 700)

        self.setStyleSheet("""
            QMainWindow {
                background-color: #F9FAFB;
            }
        """)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()

        header = QLabel("Qu·∫£n l√Ω Sinh vi√™n")
        header.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #6B46C1;
                padding: 20px;
            }
        """)
        layout.addWidget(header)

        button_layout = QHBoxLayout()
        self.add_btn = QPushButton("‚ûï Th√™m sinh vi√™n")
        self.add_btn.setStyleSheet("""
            QPushButton {
                background-color: #10B981;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #059669;
            }
        """)
        self.add_btn.clicked.connect(self.addStudent)

        self.edit_btn = QPushButton("‚úèÔ∏è S·ª≠a sinh vi√™n")
        self.edit_btn.setStyleSheet("""
            QPushButton {
                background-color: #3B82F6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2563EB;
            }
            QPushButton:disabled {
                background-color: #D1D5DB;
                color: #9CA3AF;
            }
        """)
        self.edit_btn.clicked.connect(self.editStudent)
        self.edit_btn.setEnabled(False)

        self.delete_btn = QPushButton("üóëÔ∏è X√≥a sinh vi√™n")
        self.delete_btn.setStyleSheet("""
            QPushButton {
                background-color: #EF4444;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #DC2626;
            }
            QPushButton:disabled {
                background-color: #D1D5DB;
                color: #9CA3AF;
            }
        """)
        self.delete_btn.clicked.connect(self.deleteStudent)
        self.delete_btn.setEnabled(False)

        button_layout.addWidget(self.add_btn)
        button_layout.addWidget(self.edit_btn)
        button_layout.addWidget(self.delete_btn)
        button_layout.addStretch()
        layout.addLayout(button_layout)

        self.student_table = QTableWidget()
        self.student_table.setColumnCount(7)
        self.student_table.setHorizontalHeaderLabels([
            "M√£ SV", "H·ªç t√™n", "Ng√†y sinh", "Gi·ªõi t√≠nh", "ƒê·ªãa ch·ªâ", "Email", "SƒêT"
        ])
        self.student_table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #D1D5DB;
                border-radius: 5px;
                background-color: white;
            }
            QTableWidget::item {
                padding: 5px;
            }
            QHeaderView::section {
                background-color: #6B46C1;
                color: white;
                padding: 5px;
                border: none;
            }
        """)
        self.student_table.horizontalHeader().setStretchLastSection(True)
        self.student_table.setSelectionMode(QTableWidget.SingleSelection)
        self.student_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.student_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.student_table.itemSelectionChanged.connect(self.onTableSelectionChanged)
        layout.addWidget(self.student_table)

        central_widget.setLayout(layout)

    def loadStudents(self):
        print("Reload danh s√°ch sinh vi√™n...")
        try:
            students = self.student_repository.get_all_students()
            self.student_table.setRowCount(len(students))
            for row, student in enumerate(students):
                self.student_table.setItem(row, 0, QTableWidgetItem(student["MaSV"]))  # MaSV
                self.student_table.setItem(row, 1, QTableWidgetItem(student["TenSV"]))  # TenSV
                self.student_table.setItem(row, 2, QTableWidgetItem(student["NgaySinh"].strftime("%d/%m/%Y")))  # NgaySinh
                self.student_table.setItem(row, 3, QTableWidgetItem(student["GioiTinh"]))  # GioiTinh
                self.student_table.setItem(row, 4, QTableWidgetItem(student["DiaChi"]))  # DiaChi
                self.student_table.setItem(row, 5, QTableWidgetItem(student["Email"]))  # Email
                self.student_table.setItem(row, 6, QTableWidgetItem(student["SDT"]))  # SDT
            self.student_table.resizeColumnsToContents()
        except Exception as e:
            traceback.print_exc()
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n: {str(e)}")

    def addStudent(self):
        dialog = StudentFormDialog(parent=self)
        dialog.studentSaved.connect(self.onStudentSaved)
        dialog.exec_()

    def onStudentUpdated(self, row, student_data):
        self.student_table.setItem(row, 0, QTableWidgetItem(student_data['MaSV']))
        self.student_table.setItem(row, 1, QTableWidgetItem(student_data['TenSV']))
        self.student_table.setItem(row, 2, QTableWidgetItem(student_data['NgaySinh']))
        self.student_table.setItem(row, 3, QTableWidgetItem(student_data['GioiTinh']))
        self.student_table.setItem(row, 4, QTableWidgetItem(student_data['DiaChi']))
        self.student_table.setItem(row, 5, QTableWidgetItem(student_data['Email']))
        self.student_table.setItem(row, 6, QTableWidgetItem(student_data['SDT']))

        self.edit_btn.setEnabled(False)
        self.delete_btn.setEnabled(False)

    def editStudent(self):
        selected_rows = self.student_table.selectionModel().selectedRows()
        if not selected_rows:
            return

        row = selected_rows[0].row()

        student_data = {
            'MaSV': self.student_table.item(row, 0).text(),  # M√£ SV
            'TenSV': self.student_table.item(row, 1).text(),  # H·ªç t√™n
            'NgaySinh': self.student_table.item(row, 2).text(),  # Ng√†y sinh
            'GioiTinh': self.student_table.item(row, 3).text(),  # Gi·ªõi t√≠nh
            'DiaChi': self.student_table.item(row, 4).text(),  # ƒê·ªãa ch·ªâ
            'Email': self.student_table.item(row, 5).text(),  # Email
            'SDT': self.student_table.item(row, 6).text(),  # SƒêT
            'embeddings': self.student_repository.get_face_embeddings_by_student_id(
                self.student_table.item(row, 0).text()
            )
        }

        dialog = StudentFormDialog(student_data=student_data, parent=self)
        dialog.studentSaved.connect(lambda updated_data: self.onStudentUpdated(row, updated_data))
        dialog.exec_()

    def deleteStudent(self):
        selected_rows = self.student_table.selectionModel().selectedRows()
        if not selected_rows:
            return

        student_id = self.student_table.item(selected_rows[0].row(), 0).text()
        if QMessageBox.question(self, "X√°c nh·∫≠n x√≥a",
                                f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a sinh vi√™n {student_id}?",
                                QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:
            try:
                success = self.student_repository.delete_student(student_id)
                if success:
                    QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a sinh vi√™n!")
                    self.loadStudents()
                else:
                    QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ x√≥a sinh vi√™n.")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"L·ªói khi x√≥a sinh vi√™n: {str(e)}")

    def onStudentSaved(self, student_data):
        self.loadStudents()
        self.edit_btn.setEnabled(False)
        self.delete_btn.setEnabled(False)

    def onTableSelectionChanged(self):
        print("üëâ ƒê√£ ch·ªçn d√≤ng trong b·∫£ng")
        selected_rows = self.student_table.selectionModel().selectedRows()
        is_selected = len(selected_rows) > 0
        print(f"S·ªë d√≤ng ƒë∆∞·ª£c ch·ªçn: {len(selected_rows)}")
        self.edit_btn.setEnabled(is_selected)
        self.delete_btn.setEnabled(is_selected)

    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        reply = QMessageBox.question(self, 'X√°c nh·∫≠n',
                                     'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?',
                                     QMessageBox.Yes | QMessageBox.No,
                                     QMessageBox.No)

        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

