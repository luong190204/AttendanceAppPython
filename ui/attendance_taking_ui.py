# python -m ui.attendance_taking_ui

from PyQt5 import QtWidgets, QtGui, QtCore
import cv2
import sys
import datetime
from PIL import Image, ImageQt

from face_recognition_module.face_recognizer import FaceRecognizer
from database.attendance_repository import AttendanceRepository
from database.session_repository import SessionRepository


class AttendanceUI(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üéì H·ªá th·ªëng ƒëi·ªÉm danh khu√¥n m·∫∑t")
        self.setGeometry(100, 100, 1200, 700)
        self.face_recognizer = FaceRecognizer()
        self.attendance = AttendanceRepository()
        self.session = SessionRepository()
        self.camera_running = False
        self.cap = None
        self.timer = None
        self.current_student = None  # L∆∞u th√¥ng tin sinh vi√™n hi·ªán t·∫°i

        # Thi·∫øt l·∫≠p style cho to√†n b·ªô ·ª©ng d·ª•ng
        self.setStyleSheet("""
            QWidget {
                background-color: #f5f5f5;
                font-family: 'Segoe UI', Arial, sans-serif;
            }

            QLabel {
                color: #333;
                font-size: 12px;
                padding: 2px;
            }

            QComboBox {
                background-color: white;
                border: 2px solid #ddd;
                border-radius: 8px;
                padding: 8px 12px;
                font-size: 13px;
                min-height: 20px;
            }

            QComboBox:focus {
                border-color: #4CAF50;
            }

            QComboBox::drop-down {
                border: none;
                width: 20px;
            }

            QComboBox::down-arrow {
                image: none;
                border: 3px solid #666;
                border-top-color: transparent;
                border-left-color: transparent;
                border-right-color: transparent;
            }

            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-size: 14px;
                font-weight: bold;
                min-width: 120px;
            }

            QPushButton:hover {
                background-color: #45a049;
                transform: translateY(-1px);
            }

            QPushButton:pressed {
                background-color: #3d8b40;
            }

            QPushButton#closeBtn {
                background-color: #f44336;
            }

            QPushButton#closeBtn:hover {
                background-color: #da190b;
            }

            QGroupBox {
                background-color: white;
                border: 2px solid #e0e0e0;
                border-radius: 12px;
                margin: 10px;
                padding-top: 15px;
                font-weight: bold;
                font-size: 14px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                left: 20px;
                padding: 0 10px 0 10px;
                color: #4CAF50;
            }
        """)

        self.setup_ui()
        self.load_sessions()
        self.session_combo.currentIndexChanged.connect(self.load_session_time)

    def setup_ui(self):
        # Layout t·ªïng
        main_layout = QtWidgets.QHBoxLayout(self)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # === V√ôNG B√äN TR√ÅI ===
        left_widget = QtWidgets.QWidget()
        left_widget.setFixedWidth(600)
        left_layout = QtWidgets.QVBoxLayout(left_widget)

        # Group box cho ph·∫ßn ch·ªçn bu·ªïi h·ªçc
        selection_group = QtWidgets.QGroupBox("üìö Th√¥ng tin bu·ªïi h·ªçc")
        selection_layout = QtWidgets.QVBoxLayout(selection_group)

        # Form ch·ªçn bu·ªïi h·ªçc
        form_layout = QtWidgets.QFormLayout()

        self.session_combo = QtWidgets.QComboBox()
        self.session_combo.setMinimumHeight(35)

        self.type_combo = QtWidgets.QComboBox()
        self.type_combo.addItems(["üîµ V√†o", "üî¥ Ra"])
        self.type_combo.setMinimumHeight(35)

        form_layout.addRow("üìñ M√¥n h·ªçc / Bu·ªïi h·ªçc:", self.session_combo)
        form_layout.addRow("‚è∞ Lo·∫°i ƒëi·ªÉm danh:", self.type_combo)

        selection_layout.addLayout(form_layout)

        # Group box cho camera
        camera_group = QtWidgets.QGroupBox("üì∑ Camera ƒëi·ªÉm danh")
        camera_layout = QtWidgets.QVBoxLayout(camera_group)

        # Camera view v·ªõi border ƒë·∫πp
        self.camera_label = QtWidgets.QLabel("üì∑ Camera ch∆∞a kh·ªüi ƒë·ªông\n\nB·∫•m 'M·ªü Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        self.camera_label.setFixedSize(550, 350)
        self.camera_label.setAlignment(QtCore.Qt.AlignCenter)
        self.camera_label.setStyleSheet("""
            QLabel {
                background-color: #263238;
                color: #fff;
                border: 3px solid #37474f;
                border-radius: 12px;
                font-size: 16px;
            }
        """)

        # N√∫t ƒëi·ªÅu khi·ªÉn v·ªõi spacing ƒë·∫πp
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.setSpacing(15)

        self.open_btn = QtWidgets.QPushButton("üì∑ M·ªü Camera")
        self.close_btn = QtWidgets.QPushButton("‚èπÔ∏è ƒê√≥ng Camera")
        self.close_btn.setObjectName("closeBtn")

        # Th√™m n√∫t ƒëi·ªÉm danh
        self.attendance_btn = QtWidgets.QPushButton("‚úÖ ƒêi·ªÉm Danh")
        self.attendance_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-size: 14px;
                font-weight: bold;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        self.attendance_btn.setEnabled(False)  # B·∫Øt ƒë·∫ßu v·ªõi tr·∫°ng th√°i disabled

        button_layout.addWidget(self.open_btn)
        button_layout.addWidget(self.close_btn)
        button_layout.addWidget(self.attendance_btn)
        button_layout.addStretch()

        self.open_btn.clicked.connect(self.start_camera)
        self.close_btn.clicked.connect(self.stop_camera)
        self.attendance_btn.clicked.connect(self.confirm_attendance)

        camera_layout.addWidget(self.camera_label)
        camera_layout.addSpacing(10)
        camera_layout.addLayout(button_layout)

        # Th√™m v√†o layout tr√°i
        left_layout.addWidget(selection_group)
        left_layout.addWidget(camera_group)
        left_layout.addStretch()

        # === V√ôNG B√äN PH·∫¢I ===
        right_widget = QtWidgets.QWidget()
        right_widget.setFixedWidth(400)
        right_layout = QtWidgets.QVBoxLayout(right_widget)

        # Group box cho th√¥ng tin sinh vi√™n
        student_group = QtWidgets.QGroupBox("üë§ Th√¥ng tin sinh vi√™n")
        student_layout = QtWidgets.QVBoxLayout(student_group)

        # ·∫¢nh khu√¥n m·∫∑t
        self.face_image_label = QtWidgets.QLabel("üì∏ Ch∆∞a c√≥ ·∫£nh")
        self.face_image_label.setFixedSize(200, 200)
        self.face_image_label.setAlignment(QtCore.Qt.AlignCenter)
        self.face_image_label.setStyleSheet("""
            QLabel {
                background-color: #eceff1;
                border: 3px dashed #90a4ae;
                border-radius: 12px;
                color: #90a4ae;
                font-size: 14px;
            }
        """)

        # Th√¥ng tin sinh vi√™n v·ªõi style ƒë·∫πp
        info_widget = QtWidgets.QWidget()
        info_layout = QtWidgets.QVBoxLayout(info_widget)
        info_layout.setSpacing(8)

        self.student_id_label = QtWidgets.QLabel("üÜî ID Sinh Vi√™n: --")
        self.student_name_label = QtWidgets.QLabel("üë§ T√™n Sinh Vi√™n: --")
        self.time_label = QtWidgets.QLabel("üïê Th·ªùi gian: --")

        # Style cho c√°c label th√¥ng tin
        info_style = """
            QLabel {
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 13px;
                color: #495057;
            }
        """

        for label in [self.student_id_label, self.student_name_label, self.time_label]:
            label.setStyleSheet(info_style)

        info_layout.addWidget(self.student_id_label)
        info_layout.addWidget(self.student_name_label)
        info_layout.addWidget(self.time_label)

        student_layout.addWidget(self.face_image_label, alignment=QtCore.Qt.AlignCenter)
        student_layout.addSpacing(10)
        student_layout.addWidget(info_widget)

        # Group box cho th√¥ng tin bu·ªïi h·ªçc
        session_info_group = QtWidgets.QGroupBox("üìã Chi ti·∫øt bu·ªïi h·ªçc")
        session_info_layout = QtWidgets.QVBoxLayout(session_info_group)

        self.class_label = QtWidgets.QLabel("üè´ Ph√≤ng h·ªçc: --")
        self.subject_label = QtWidgets.QLabel("üìö M√¥n h·ªçc: --")
        self.session_time_label = QtWidgets.QLabel("‚è∞ Th·ªùi gian bu·ªïi h·ªçc: --")

        for label in [self.class_label, self.subject_label, self.session_time_label]:
            label.setStyleSheet(info_style)

        session_info_layout.addWidget(self.class_label)
        session_info_layout.addWidget(self.subject_label)
        session_info_layout.addWidget(self.session_time_label)

        # Th√™m v√†o layout ph·∫£i
        right_layout.addWidget(student_group)
        right_layout.addWidget(session_info_group)
        right_layout.addStretch()

        # G·ªôp hai v√πng
        main_layout.addWidget(left_widget)
        main_layout.addWidget(right_widget)

    def load_sessions(self):
        """Load d·ªØ li·ªáu bu·ªïi h·ªçc t·ª´ database v√†o combo box"""
        try:
            if not self.session:
                return

            sessions = self.session.get_all_sessions()
            self.session_combo.clear()
            self.session_combo.addItem("-- Ch·ªçn bu·ªïi h·ªçc --", "")

            if not sessions:
                QtWidgets.QMessageBox.warning(self, "‚ö†Ô∏è Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y bu·ªïi h·ªçc n√†o!")
                return

            for session in sessions:
                if isinstance(session, tuple):
                    ma_buoi = session[0]
                    ten_mon = session[1]
                else:
                    ma_buoi = session.get("MaBuoiHoc")
                    ten_mon = session.get("TenMon")

                display_text = f"{ten_mon} / {ma_buoi}"
                self.session_combo.addItem(display_text, ma_buoi)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "‚ùå L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch bu·ªïi h·ªçc: {str(e)}")

    def load_session_time(self):
        """Load th·ªùi gian c·ªßa bu·ªïi h·ªçc"""
        try:
            ma_buoi_hoc = self.session_combo.currentData()
            if not ma_buoi_hoc:
                self.session_time_label.setText("‚è∞ Th·ªùi gian bu·ªïi h·ªçc: --")
                self.subject_label.setText("üìö M√¥n h·ªçc: --")
                self.class_label.setText("üè´ Ph√≤ng h·ªçc: --")
                return

            session_info = self.session.get_session_by_id(ma_buoi_hoc)
            if session_info:
                bat_dau = session_info.get("GioBatDau", "??:??:??")
                ket_thuc = session_info.get("GioKetThuc", "??:??:??")
                ten_mon = session_info.get("TenMon", "Kh√¥ng r√µ")
                phong_hoc = session_info.get("PhongHoc", "Kh√¥ng r√µ")
                self.session_time_label.setText(f"‚è∞ Th·ªùi gian bu·ªïi h·ªçc: {bat_dau} - {ket_thuc}")
                self.subject_label.setText(f"üìö M√¥n h·ªçc: {ten_mon}")
                self.class_label.setText(f"üè´ Ph√≤ng h·ªçc:  {phong_hoc}")
            else:
                self.session_time_label.setText("‚è∞ Th·ªùi gian bu·ªïi h·ªçc: Kh√¥ng t√¨m th·∫•y")
                self.subject_label.setText("üìö M√¥n h·ªçc: Kh√¥ng r√µ")
        except Exception as e:
            self.session_time_label.setText("‚è∞ Th·ªùi gian bu·ªïi h·ªçc: L·ªói t·∫£i d·ªØ li·ªáu")

    def start_camera(self):
        """Kh·ªüi ƒë·ªông camera"""
        try:
            if not self.camera_running:
                self.cap = cv2.VideoCapture(0)
                if not self.cap.isOpened():
                    QtWidgets.QMessageBox.critical(self, "‚ùå L·ªói Camera",
                                                   "Kh√¥ng th·ªÉ m·ªü camera!\nVui l√≥ng ki·ªÉm tra:\n"
                                                   "‚Ä¢ Camera c√≥ ƒë∆∞·ª£c k·∫øt n·ªëi?\n"
                                                   "‚Ä¢ ·ª®ng d·ª•ng kh√°c c√≥ ƒëang s·ª≠ d·ª•ng camera?")
                    return

                # Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i camera
                self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

                self.camera_running = True
                self.timer = QtCore.QTimer()
                self.timer.timeout.connect(self.update_frame)
                self.timer.start(30)  # 30ms = ~33 FPS

                self.camera_label.setText("üì∑ Camera ƒëang ho·∫°t ƒë·ªông...")
                self.open_btn.setEnabled(False)
                self.close_btn.setEnabled(True)
                self.attendance_btn.setEnabled(False)  # Reset n√∫t ƒëi·ªÉm danh
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "‚ùå L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera: {str(e)}")

    def update_frame(self):
        """C·∫≠p nh·∫≠t frame t·ª´ camera"""
        try:
            if not self.cap or not self.camera_running:
                return

            ret, frame = self.cap.read()
            if not ret:
                return

            # L·∫≠t frame theo chi·ªÅu ngang (mirror effect)
            frame = cv2.flip(frame, 1)

            # Nh·∫≠n di·ªán khu√¥n m·∫∑t
            recognized_faces = self.face_recognizer.recognize_faces_in_frame(frame)

            # V·∫Ω khung cho c√°c khu√¥n m·∫∑t ƒë∆∞·ª£c nh·∫≠n di·ªán
            for student_id, student_name, face_location, confidence, face_img in recognized_faces:
                top, right, bottom, left = face_location

                if student_id and confidence > 70:  # ƒê·ªô tin c·∫≠y cao
                    print(f"ƒê√£ nh·∫≠n di·ªán: {student_id} - {student_name} ({confidence}%)")

                    # V·∫Ω khung xanh cho khu√¥n m·∫∑t ƒë∆∞·ª£c nh·∫≠n di·ªán
                    cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                    cv2.putText(frame, f"{student_name} ({confidence}%)",
                                (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                    # Ch·ªâ hi·ªÉn th·ªã th√¥ng tin m√† kh√¥ng t·∫Øt camera
                    self.display_student_info(student_id, student_name, face_img, confidence)

                elif student_id:  # Nh·∫≠n di·ªán ƒë∆∞·ª£c nh∆∞ng ƒë·ªô tin c·∫≠y th·∫•p
                    cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 255), 2)
                    cv2.putText(frame, f"{student_name} ({confidence}%)",
                                (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 2)
                else:
                    # V·∫Ω khung ƒë·ªè cho khu√¥n m·∫∑t ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c
                    cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
                    cv2.putText(frame, "Unknown",
                                (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

            # Hi·ªÉn th·ªã frame l√™n giao di·ªán
            self.display_frame(frame)

        except Exception as e:
            print(f"L·ªói update_frame: {str(e)}")

    def display_frame(self, frame):
        """Hi·ªÉn th·ªã frame l√™n label"""
        try:
            # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB
            rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = rgb_image.shape
            bytes_per_line = ch * w

            # T·∫°o QImage
            qt_image = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)

            # Scale ƒë·ªÉ fit v·ªõi label
            pixmap = QtGui.QPixmap.fromImage(qt_image)
            scaled_pixmap = pixmap.scaled(self.camera_label.size(),
                                          QtCore.Qt.KeepAspectRatio,
                                          QtCore.Qt.SmoothTransformation)

            self.camera_label.setPixmap(scaled_pixmap)
        except Exception as e:
            print(f"L·ªói display_frame: {str(e)}")

    def display_student_info(self, student_id, student_name, face_img, confidence):
        """Hi·ªÉn th·ªã th√¥ng tin sinh vi√™n l√™n giao di·ªán m√† kh√¥ng t·∫Øt camera"""
        try:
            student_info = self.face_recognizer.get_student_info(student_id)
            now = datetime.datetime.now()

            # Format th·ªùi gian: gi·ªù -> ng√†y
            time_str = now.strftime("%H:%M:%S %d/%m/%Y")

            # L∆∞u th√¥ng tin sinh vi√™n hi·ªán t·∫°i
            self.current_student = {
                'student_id': student_id,
                'student_name': student_name,
                'face_img': face_img,
                'student_info': student_info,
                'time_str': time_str
            }

            # Hi·ªÉn th·ªã th√¥ng tin
            self.student_id_label.setText(f"üÜî ID Sinh Vi√™n: {student_info.get('MaSV', student_id)}")
            self.student_name_label.setText(
                f"üë§ T√™n Sinh Vi√™n: {student_info.get('TenSV', student_name)} ({confidence}%)")
            self.time_label.setText(f"üïê Th·ªùi gian: {time_str}")

            # Enable n√∫t ƒëi·ªÉm danh
            self.attendance_btn.setEnabled(True)

            # Hi·ªÉn th·ªã ·∫£nh khu√¥n m·∫∑t n·∫øu c√≥
            if face_img is not None:
                try:
                    face_img_rgb = cv2.cvtColor(face_img, cv2.COLOR_BGR2RGB)
                    h, w, ch = face_img_rgb.shape
                    bytes_per_line = ch * w
                    qt_image = QtGui.QImage(face_img_rgb.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
                    pixmap = QtGui.QPixmap.fromImage(qt_image).scaled(200, 200, QtCore.Qt.KeepAspectRatio,
                                                                      QtCore.Qt.SmoothTransformation)
                    self.face_image_label.setPixmap(pixmap)
                except Exception as e:
                    print(f"L·ªói hi·ªÉn th·ªã ·∫£nh khu√¥n m·∫∑t: {str(e)}")

        except Exception as e:
            print(f"L·ªói display_student_info: {str(e)}")

    def confirm_attendance(self):
        """X√°c nh·∫≠n ƒëi·ªÉm danh khi ng∆∞·ªùi d√πng b·∫•m n√∫t"""
        if self.current_student:
            self.process_attendance(
                self.current_student['student_id'],
                self.current_student['student_name'],
                self.current_student['face_img']
            )
            # Reset th√¥ng tin sinh vi√™n v√† disable n√∫t
            self.current_student = None
            self.attendance_btn.setEnabled(False)

    def process_attendance(self, student_id, student_name, face_img):
        """X·ª≠ l√Ω ƒëi·ªÉm danh cho sinh vi√™n - ch·ªâ ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng x√°c nh·∫≠n"""
        try:
            student_info = self.face_recognizer.get_student_info(student_id)
            now = datetime.datetime.now()

            # Format th·ªùi gian: gi·ªù -> ng√†y
            time_str = now.strftime("%H:%M:%S %d/%m/%Y")
            datetime_str = now.strftime("%Y-%m-%d %H:%M:%S")

            session_id = self.session_combo.currentData()
            status = self.type_combo.currentText().replace("üîµ ", "").replace("üî¥ ", "")

            if not session_id:
                QtWidgets.QMessageBox.warning(self, "‚ö†Ô∏è Th√¥ng b√°o", "Vui l√≤ng ch·ªçn bu·ªïi h·ªçc tr∆∞·ªõc khi ƒëi·ªÉm danh!")
                return

            # L∆∞u ƒëi·ªÉm danh
            self.attendance.add_attendance_record(session_id, student_id, datetime_str, status)

            # Th√¥ng b√°o th√†nh c√¥ng
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setWindowTitle("‚úÖ ƒêi·ªÉm danh th√†nh c√¥ng")
            msg.setText(f"Sinh vi√™n {student_info.get('TenSV', student_name)} ƒë√£ ƒëi·ªÉm danh th√†nh c√¥ng!")
            msg.setDetailedText(f"Th·ªùi gian: {time_str}\nLo·∫°i: {status}")
            msg.exec_()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "‚ùå L·ªói", f"Kh√¥ng th·ªÉ x·ª≠ l√Ω ƒëi·ªÉm danh: {str(e)}")

    def stop_camera(self):
        """D·ª´ng camera"""
        try:
            if self.camera_running and self.timer:
                self.timer.stop()
                self.timer = None

            if self.cap:
                self.cap.release()
                self.cap = None

            self.camera_label.clear()
            self.camera_label.setText("üì∑ Camera ƒë√£ d·ª´ng\n\nB·∫•m 'M·ªü Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i")
            self.camera_running = False

            self.open_btn.setEnabled(True)
            self.close_btn.setEnabled(False)
            self.attendance_btn.setEnabled(False)  # Disable n√∫t ƒëi·ªÉm danh
            self.current_student = None  # Reset th√¥ng tin sinh vi√™n
        except Exception as e:
            print(f"L·ªói stop_camera: {str(e)}")

    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        self.stop_camera()
        event.accept()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)

    # Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng (n·∫øu c√≥)
    app.setApplicationName("H·ªá th·ªëng ƒëi·ªÉm danh khu√¥n m·∫∑t")
    app.setOrganizationName("Your Organization")

    window = AttendanceUI()
    window.show()
    sys.exit(app.exec_())