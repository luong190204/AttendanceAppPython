# debug_db.py - Script ƒë·ªÉ debug k·∫øt n·ªëi database
import sys
import os
import logging

# Thi·∫øt l·∫≠p logging chi ti·∫øt
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def debug_database_connection():
    """Debug k·∫øt n·ªëi database step by step"""

    print("=" * 50)
    print("DEBUG DATABASE CONNECTION")
    print("=" * 50)

    # 1. Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n project
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    print(f"1. Project root: {project_root}")
    print(f"   Current working directory: {os.getcwd()}")

    if project_root not in sys.path:
        sys.path.insert(0, project_root)
        print(f"   Added to sys.path: {project_root}")

    # 2. Ki·ªÉm tra file database c√≥ t·ªìn t·∫°i kh√¥ng
    db_files = [
        "database/__init__.py",
        "database/connection_manager.py",
        "database/user_repository.py"
    ]

    print("\n2. Ki·ªÉm tra files database:")
    for file_path in db_files:
        full_path = os.path.join(project_root, file_path)
        exists = os.path.exists(full_path)
        print(f"   {file_path}: {'‚úì' if exists else '‚úó'}")
        if not exists:
            print(f"      ‚Üí File kh√¥ng t·ªìn t·∫°i: {full_path}")

    # 3. Th·ª≠ import c√°c modules
    print("\n3. Th·ª≠ import modules:")

    try:
        print("   Importing connection_manager...")
        from database.connection_manager import ConnectionManager
        print("   ‚úì Import ConnectionManager th√†nh c√¥ng")
    except Exception as e:
        print(f"   ‚úó L·ªói import ConnectionManager: {e}")
        return False

    try:
        print("   Importing user_repository...")
        from database.user_repository import UserRepository
        print("   ‚úì Import UserRepository th√†nh c√¥ng")
    except Exception as e:
        print(f"   ‚úó L·ªói import UserRepository: {e}")
        return False

    # 4. Ki·ªÉm tra c√°c dependencies
    print("\n4. Ki·ªÉm tra dependencies:")
    required_packages = ['mysql-connector-python', 'bcrypt']

    for package in required_packages:
        try:
            if package == 'mysql-connector-python':
                import mysql.connector
                print(f"   ‚úì {package} ƒë√£ c√†i ƒë·∫∑t")
            elif package == 'bcrypt':
                import bcrypt
                print(f"   ‚úì {package} ƒë√£ c√†i ƒë·∫∑t")
        except ImportError:
            print(f"   ‚úó {package} ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            print(f"      ‚Üí Ch·∫°y: pip install {package}")

    # 5. Th·ª≠ kh·ªüi t·∫°o ConnectionManager
    print("\n5. Th·ª≠ kh·ªüi t·∫°o ConnectionManager:")
    try:
        conn_manager = ConnectionManager()
        print("   ‚úì Kh·ªüi t·∫°o ConnectionManager th√†nh c√¥ng")

        # Ki·ªÉm tra config
        if hasattr(conn_manager, 'config'):
            print(f"   Config: {conn_manager.config}")

    except Exception as e:
        print(f"   ‚úó L·ªói kh·ªüi t·∫°o ConnectionManager: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 6. Th·ª≠ k·∫øt n·ªëi database
    print("\n6. Th·ª≠ k·∫øt n·ªëi database:")
    try:
        print("   ƒêang g·ªçi conn_manager.connect()...")
        result = conn_manager.connect()
        print(f"   K·∫øt qu·∫£: {result}")

        if result:
            print("   ‚úì K·∫øt n·ªëi database th√†nh c√¥ng!")

            # Th·ª≠ m·ªôt s·ªë operations c∆° b·∫£n
            if hasattr(conn_manager, 'connection') and conn_manager.connection:
                cursor = conn_manager.connection.cursor()
                cursor.execute("SELECT 1")
                test_result = cursor.fetchone()
                print(f"   Test query result: {test_result}")
                cursor.close()
        else:
            print("   ‚úó K·∫øt n·ªëi database th·∫•t b·∫°i")
            return False

    except Exception as e:
        print(f"   ‚úó L·ªói khi k·∫øt n·ªëi database: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 7. Th·ª≠ kh·ªüi t·∫°o UserRepository
    print("\n7. Th·ª≠ kh·ªüi t·∫°o UserRepository:")
    try:
        user_repo = UserRepository()
        print("   ‚úì Kh·ªüi t·∫°o UserRepository th√†nh c√¥ng")

        # Th·ª≠ m·ªôt operation ƒë∆°n gi·∫£n
        try:
            result = user_repo.get_lecturer_by_id("test")
            print(f"   Test query result: {result}")
        except Exception as e:
            print(f"   L·ªói test query: {e}")

    except Exception as e:
        print(f"   ‚úó L·ªói kh·ªüi t·∫°o UserRepository: {e}")
        import traceback
        traceback.print_exc()
        return False

    print("\n" + "=" * 50)
    print("DEBUG HO√ÄN T·∫§T - T·∫§T C·∫¢ OK!")
    print("=" * 50)
    return True


def check_mysql_service():
    """Ki·ªÉm tra MySQL service c√≥ ƒëang ch·∫°y kh√¥ng"""
    print("\n8. Ki·ªÉm tra MySQL Service:")

    import subprocess
    import platform

    system = platform.system().lower()

    try:
        if system == "windows":
            # Windows
            result = subprocess.run(
                ['sc', 'query', 'mysql'],
                capture_output=True, text=True, timeout=10
            )
            if "RUNNING" in result.stdout:
                print("   ‚úì MySQL service ƒëang ch·∫°y (Windows)")
            else:
                print("   ‚úó MySQL service kh√¥ng ch·∫°y (Windows)")
                print("   ‚Üí Kh·ªüi ƒë·ªông: net start mysql")

        elif system == "linux":
            # Linux
            result = subprocess.run(
                ['systemctl', 'is-active', 'mysql'],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0:
                print("   ‚úì MySQL service ƒëang ch·∫°y (Linux)")
            else:
                print("   ‚úó MySQL service kh√¥ng ch·∫°y (Linux)")
                print("   ‚Üí Kh·ªüi ƒë·ªông: sudo systemctl start mysql")

        elif system == "darwin":
            # macOS
            result = subprocess.run(
                ['brew', 'services', 'list'],
                capture_output=True, text=True, timeout=10
            )
            if "mysql" in result.stdout and "started" in result.stdout:
                print("   ‚úì MySQL service ƒëang ch·∫°y (macOS)")
            else:
                print("   ‚úó MySQL service kh√¥ng ch·∫°y (macOS)")
                print("   ‚Üí Kh·ªüi ƒë·ªông: brew services start mysql")

    except Exception as e:
        print(f"   Kh√¥ng th·ªÉ ki·ªÉm tra MySQL service: {e}")


if __name__ == "__main__":
    print("Ch·∫°y debug database connection...")

    # Ki·ªÉm tra MySQL service tr∆∞·ªõc
    check_mysql_service()

    # Debug database connection
    success = debug_database_connection()

    if success:
        print("\nüéâ Database connection OK! B·∫°n c√≥ th·ªÉ ch·∫°y ·ª©ng d·ª•ng ch√≠nh.")
    else:
        print("\n‚ùå C√≥ l·ªói v·ªõi database connection. Vui l√≤ng ki·ªÉm tra c√°c b∆∞·ªõc tr√™n.")

    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")